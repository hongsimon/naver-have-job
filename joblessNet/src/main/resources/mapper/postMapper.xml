<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jobless.dao.mapper.IPostMapper">

	<!-- T -->
	<insert id="insertPost" parameterType="Post">
		INSERT INTO post (post_title, content_id, board_id, user_id, category_id) 
		VALUES (#{title}, #{contentId}, #{boardId}, #{writerId}, #{categoryId});
	</insert>
	
	<!-- T -->
	<update id="updatePost" parameterType="Post">
		update post 
		set 
			post_title = #{title},
			category_id = #{categoryId}
		where 
			post_id = #{postId}
	</update>
	
	<update id="updatePostView" parameterType="Post">
		update post
		set
			views = #{views}
		where
			post_id = #{postId}
	</update>
	
	<!-- T -->
	<delete id="deletePost" parameterType="int">
		delete from post where post_id = #{postId}
	</delete>
	
	<!-- T -->
	<select id="selectPostById"  parameterType="int" resultType="Post">
		select 
			post_id postId, 
			post_title title, 
			write_date writeDate, 
			content_id contentId, 
			board_id boardId, 
			views, 
			user_id writerId,
			category_id categoryId
		from 
			post 
		where 
			post_id = #{postId}
	</select>
	
	<!-- T -->
	<select id="selectPostList" resultType="Post">
		select 
			post_id postId, 
			post_title title, 
			write_date writeDate, 
			content_id contentId, 
			board_id boardId, 
			views, 
			user_id writerId,
			category_id categoryId
		from 
			post
	</select>
	
	<!-- T -->
	<select id="selectPostOwnList" parameterType="int" resultType="Post">
		select
			post_id postId, 
			post_title title, 
			write_date writeDate, 
			content_id contentId, 
			board_id boardId, 
			views, 
			user_id writerId,
			category_id categoryId
		from 
			post
		where
			user_id = #{writerId}
	</select>
	
	<select id="selectPostByBoardId" parameterType="int" resultType="Post">
		select
			p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			content_id contentId, 
			board_id boardId, 
			views, 
			p.user_id writerId,
			category_id categoryId,
			(select count(comment_content) from comment where post_id = cm.post_id) as comments
		from 
			post p join taku.comment cm on p.post_id = cm.post_id
		where
			board_id = #{boardId}
	</select>
	
	<select id="selectPostByCategoryId" parameterType="int" resultType="Post">
		select
			post_id postId, 
			post_title title, 
			write_date writeDate, 
			content_id contentId, 
			board_id boardId, 
			views, 
			user_id writerId,
			category_id categoryId
		from 
			post
		where
			category_id = #{categoryId}
	</select>
	
	<select id="selectLastInsertId" resultType="int">
		select LAST_INSERT_ID() from taku.content limit 1;
	</select>
	
	<resultMap type="PostDetail" id="PostMap" autoMapping="true">
		<association property="post" javaType="Post" autoMapping="true"/>
		<association property="user" javaType="User" autoMapping="true"/>
		<association property="boardCategory" javaType="BoardCategory" autoMapping="true"/>
		<association property="content" javaType="Content" autoMapping="true"/>
	</resultMap>
	
	<select id="selectPostDetail" parameterType="int" resultMap="PostMap">
		select 
			p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			p.content_id contentId, 
			board_id boardId, 
			views, 
			p.user_id writerId,
			category_id categoryId,
			u.user_id writerId,
			nickname,
			content,
			count(l.post_id) likes
		from 
			post p 
			join user u on p.user_id = u.user_id
			join content c on p.content_id = c.content_id
			left outer join taku.like l on p.post_id = l.post_id
		where 
			p.post_id = #{postId}
		group by
			p.post_id
	</select>
	
	<select id="selectPostDetailAll" resultMap="PostMap">
		select p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			p.content_id contentId, 
			p.board_id boardId, 
			views,
			p.user_id writerId,
			p.category_id boardCategoryId,
            bc.category_name categoryName,
			u.user_id writerId,
			nickname,
			content,
			count(l.post_id) likes
		from 
			post p 
			join user u on p.user_id = u.user_id
			join content c on p.content_id = c.content_id
            join board_category bc on p.category_id = bc.category_id
			left outer join taku.like l on p.post_id = l.post_id
		group by
			p.post_id;
	</select>
	
	<select id="selectPostDetailByBoardId" parameterType="int" resultMap="PostMap">
		select p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			p.content_id contentId, 
			p.board_id boardId, 
			views,
			p.user_id writerId,
			p.category_id boardCategoryId,
            bc.category_name categoryName,
			u.user_id writerId,
			nickname,
			content,
			count(l.post_id) likes
		from 
			post p 
			join user u on p.user_id = u.user_id
			join content c on p.content_id = c.content_id
            join board_category bc on p.category_id = bc.category_id
			left outer join taku.like l on p.post_id = l.post_id
		where
			p.board_id = #{boardId}
	</select>
	
	<select id="selectPostDetailByCategoryId" parameterType="int" resultMap="PostMap">
		select p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			p.content_id contentId, 
			p.board_id boardId, 
			views,
			p.user_id writerId,
			p.category_id boardCategoryId,
            bc.category_name categoryName,
			u.user_id writerId,
			nickname,
			content,
			count(l.post_id) likes
		from 
			post p 
			join user u on p.user_id = u.user_id
			join content c on p.content_id = c.content_id
            join board_category bc on p.category_id = bc.category_id
			left outer join taku.like l on p.post_id = l.post_id
		where
			bc.category_id = #{categoryId}
	</select>
	
	<select id="selectPostDetailByBoardIdAndCategoryId" parameterType="PostDetail" resultMap="PostMap">
		select p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			p.content_id contentId, 
			p.board_id boardId, 
			views,
			p.user_id writerId,
			p.category_id boardCategoryId,
            bc.category_name categoryName,
			u.user_id writerId,
			nickname,
			content,
			count(l.post_id) likes
		from 
			post p 
			join user u on p.user_id = u.user_id
			join content c on p.content_id = c.content_id
            join board_category bc on p.category_id = bc.category_id
			left outer join taku.like l on p.post_id = l.post_id
		where
			bc.category_id = #{categoryId} 
			AND p.board_id = #{boardId}
	</select>

	<select id="selectDetailPostList" parameterType="map" resultMap="PostMap">
		select 
			p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			p.content_id contentId, 
			board_id boardId, 
			views,
			p.user_id writerId,
			category_id categoryId,
			u.user_id writerId,
			nickname,
			content,
			count(l.post_id) likes
		from 
			post p 
			join user u on p.user_id = u.user_id
			join content c on p.content_id = c.content_id
			left outer join taku.like l on p.post_id = l.post_id
		WHERE
			board_id = #{boardId}
			<if test="condition.period != null">
			AND write_date &gt; #{condition.period.startDate} AND write_date &lt; #{condition.period.endDate}
			</if>
			<if test="condition.id != null">
				<if test="condition.id.writerId">
				AND p.user_id = #{condition.id.writerId}
				</if>
				<if test="condition.id.categoryId > 1">
				AND category_id = #{condition.id.categoryId}
				</if>
			</if>
			<if test="condition.text != null">
				<if test="condition.text.title != null">
				AND post_title LIKE #{condition.text.title}
				</if>
				<if test="condition.text.content != null">
				AND content LIKE #{condition.text.content}
				</if>
			</if>
		GROUP BY
			p.post_id
		ORDER BY
			p.post_id desc
			<if test="condition.order != null">
				<if test="condition.order.likes">
				, likes desc
				</if>
				<if test="condition.order.views">
				, views desc
				</if>
			</if>
		<if test="condition.limit != null">
		LIMIT
			#{condition.limit.startIndex}, #{condition.limit.offset}
		</if>		
	</select>
	
	<select id="selectPostCount" parameterType="post" resultType="int">
		select 
			count(*) 
		from 
			post
		where 
			board_id = #{boardId}
			<if test="categoryId > 1">
				AND category_id = #{categoryId};
			</if>
	</select>
</mapper>