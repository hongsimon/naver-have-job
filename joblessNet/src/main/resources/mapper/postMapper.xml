<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jobless.dao.mapper.IPostMapper">

	<!-- T -->
	<insert id="insertPost" parameterType="Post">
		INSERT INTO post (post_title, content_id, board_id, user_id, category_id) 
		VALUES (#{title}, #{contentId}, #{boardId}, #{writerId}, #{categoryId});
	</insert>
	
	<!-- T -->
	<update id="updatePost" parameterType="Post">
		update post 
		set 
			post_title = #{title},
			category_id = #{categoryId}
		where 
			post_id = #{postId}
	</update>
	
	<!-- T -->
	<delete id="deletePost" parameterType="int">
		delete from post where post_id = #{postId}
	</delete>
	
	<!-- T -->
	<select id="selectPostById"  parameterType="int" resultType="Post">
		select 
			post_id postId, 
			post_title title, 
			write_date writeDate, 
			content_id contentId, 
			board_id contentId, 
			views, 
			user_id writerId,
			category_id categoryId
		from 
			post 
		where 
			post_id = #{postId}
	</select>
	
	<!-- T -->
	<select id="selectPostList" resultType="Post">
		select 
			post_id postId, 
			post_title title, 
			write_date writeDate, 
			content_id contentId, 
			board_id contentId, 
			views, 
			user_id writerId,
			category_id categoryId
		from 
			post
	</select>
	
	<!-- T -->
	<select id="selectPostOwnList" parameterType="int" resultType="Post">
		select
			post_id postId, 
			post_title title, 
			write_date writeDate, 
			content_id contentId, 
			board_id contentId, 
			views, 
			user_id writerId,
			category_id categoryId
		from 
			post
		where
			user_id = #{writerId}
	</select>
	
	<resultMap type="PostDetail" id="PostMap">
		<result property="likes" column="likes" javaType="int"/>
		<association property="post" javaType="Post" autoMapping="true"/>
		<association property="user" javaType="User" autoMapping="true"/>
		<association property="content" javaType="Content" autoMapping="true"/>
	</resultMap>
	
	<select id="selectPostDetail" parameterType="int" resultMap="PostMap">
		select 
			p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			p.content_id contentId, 
			board_id contentId, 
			views, 
			p.user_id writerId,
			category_id categoryId,
			u.user_id userId,
			nickname,
			content,
			count(p.post_id) likes
		from 
			post p 
			join user u on p.user_id = u.user_id
			join content c on p.content_id = c.content_id
			left outer join taku.like l on p.post_id = l.post_id
		where 
			p.post_id = #{postId}
		group by
			p.post_id
	</select>

	<select id="selectDetailPostList" parameterType="Condition" resultMap="PostMap">
		select 
			p.post_id postId, 
			post_title title, 
			write_date writeDate, 
			p.content_id contentId, 
			board_id contentId, 
			views, 
			p.user_id writerId,
			category_id categoryId,
			u.user_id userId,
			nickname,
			content,
			count(l.post_id) likes
		from 
			post p 
			join user u on p.user_id = u.user_id
			join content c on p.content_id = c.content_id
			left outer join taku.like l on p.post_id = l.post_id
		<if test="period != null || id != null">
		WHERE
			<if test="period != null">
			write_date &gt; #{period.startDate} AND write_date &lt; #{period.endDate} <if test="id != null">AND</if>
			</if>
			<if test="id != null">
			
			</if>
		</if>
		GROUP BY
			p.post_id
		<if test="order != null">
		ORDER BY
			<if test="order.likes">
			likes desc <if test="order.views">,</if>
			</if>
			<if test="order.views">
			views desc
			</if>
		</if>
		<if test="limit != null">
		LIMIT
			#{limit.startIndex}, #{limit.offset}
		</if>
	</select>
</mapper>