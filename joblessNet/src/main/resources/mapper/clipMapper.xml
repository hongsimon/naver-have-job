<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jobless.dao.mapper.IClipMapper">
	<!-- 우리가 jdbc로 작성했던 쿼리문을 여기다가 만들면 됨 -->
  	<insert id="insertClip" parameterType="Clip">
  		insert into clip(clip_title, clip_url, thumb_url, writer_id, broadcaster_id) values(#{title}, #{clipURL}, #{thumbURL}, #{writerId}, #{broadcasterId})
  	</insert>
  	<select id="selectClipList" resultType="Clip">
  		select 
  			clip_id clipId, 
  			clip_title title, 
  			clip_url clipURL,
  			thumb_url thumbURL, 
  			write_date writeDate, 
  			views, 
  			writer_id writerId, 
  			broadcaster_id broadcasterId
  		from clip
  	</select>
  	<select id="selectClipById" parameterType="int" resultType="Clip">
  		select 
  			clip_id clipId, 
  			clip_title title, 
  			clip_url clipURL, 
  			thumb_url thumbURL,
  			write_date writeDate, 
  			views, 
  			writer_id writerId, 
  			broadcaster_id broadcasterId 
  		from clip 
  		where clip_id = #{clipId}
  	</select>
  	<select id="selectClipByWriterId" parameterType="int" resultType="Clip">
  		select 
  			clip_id clipId, 
  			clip_title title, 
  			clip_url clipURL, 
  			thumb_url thumbURL,
  			write_date writeDate, 
  			views, 
  			writer_id writerId, 
  			broadcaster_id broadcasterId 
  		from clip 
  		where writer_id = #{writerId}
  	</select>
  	<select id="selectClipByBroadcasterId" parameterType="int" resultType="Clip">
  		select 
  			clip_id clipId, 
  			clip_title title, 
  			clip_url clipURL, 
  			thumb_url thumbURL,
  			write_date writeDate, 
  			views, 
  			writer_id writerId, 
  			broadcaster_id broadcasterId 
  		from clip 
  		where broadcaster_id = #{broadcasterId}
  	</select>
  	<delete id="deleteClip" parameterType="int">
  		delete from clip where clip_id = #{clipId}
  	</delete>
  	
	<resultMap type="ClipDetail" id="ClipMap" autoMapping="true">
		<association property="clip" javaType="Clip" autoMapping="true"/>
		<association property="writer" javaType="User">
			<result property="userId" column="writerId"/>
			<result property="nickName" column="writerNickname"/>
		</association>
		<association property="broadcaster" javaType="User">
			<result property="userId" column="broadcasterId"/>
			<result property="nickName" column="broadcasterNickname"/>
		</association>
	</resultMap>
	
  	<select id="selectClipDetail" parameterType="int" resultMap="ClipMap">
  		select 
  			c.clip_id clipId, 
  			clip_title title, 
  			clip_url clipURL, 
  			write_date writeDate, 
  			views, 
  			writer_id writerId, 
  			broadcaster_id broadcasterId,
  			w.nickname writerNickname,
  			b.nickname broadcasterNickname,
  			count(l.clip_id) likes
  		from 
  			clip c join user w on c.writer_id = w.user_id
  			left outer join user b on c.broadcaster_id = b.user_id
  			left outer join taku.like l on c.clip_id = l.clip_id
  		where
  			c.clip_id = #{clipId}
  		group by
  			c.clip_id
  	</select>
  	
  	<select id="selectClipDetailList" parameterType="Condition" resultMap="ClipMap">
  		select 
  			c.clip_id clipId, 
  			clip_title title, 
  			clip_url clipURL,
  			thumb_url thumbURL, 
  			write_date writeDate, 
  			views,
  			writer_id writerId, 
  			broadcaster_id broadcasterId,
  			w.nickname writerNickname,
  			b.nickname broadcasterNickname,
  			(select count(clip_id) from taku.like where clip_id = l.clip_id) as likes,
  			(select count(comment_content) from comment where clip_id = cm.clip_id) as comments
  		from 
  			clip c join user w on c.writer_id = w.user_id
  			left outer join user b on c.broadcaster_id = b.user_id
  			left outer join taku.like l on c.clip_id = l.clip_id
  			left outer join taku.comment cm on c.clip_id = cm.clip_id
  		where
  			write_date &gt; 0000-00-00
			<if test="period != null">
			AND write_date &gt; #{period.startDate} AND write_date &lt; #{period.endDate}
			</if>
			<if test="id != null">
				<if test="id.writerId">
				AND writer_id = ${id.writerId}
				</if>
				<if test="id.broadcasterId">
				AND broadcaster_id = ${id.broadcasterId}
				</if>
			</if>
			<if test="text != null">
				AND (clip_title LIKE #{text.title}
				OR b.nickname = #{text.nickname})
			</if>
  		GROUP BY
  			c.clip_id
		<if test="order != null">
		ORDER BY
			<if test="order.primaryKey">
			c.clip_id desc
			</if>
			<if test="order.likes">
			likes desc
			</if>
			<if test="order.views">
			views desc
			</if>

		</if>
		<if test="limit != null">
		LIMIT
			#{limit.startIndex}, #{limit.offset}
		</if>		
  	</select>
  	
  	<update id="readToIncreaseViews" parameterType="Clip">
		update clip 
		set 
			views = views + 1
		where 
			clip_id = #{clipId}
	</update>
	
	<select id="readListCriteria" resultMap="ClipMap">
  		<![CDATA[
  		select 
  			c.clip_id clipId, 
  			clip_title title, 
  			clip_url clipURL,
  			thumb_url thumbURL, 
  			write_date writeDate, 
  			views, 
  			writer_id writerId, 
  			broadcaster_id broadcasterId,
  			w.nickname writerNickname,
  			b.nickname broadcasterNickname,
  			count(l.clip_id) likes
  		from 
  			clip c join user w on c.writer_id = w.user_id
  			left outer join user b on c.broadcaster_id = b.user_id
  			left outer join taku.like l on c.clip_id = l.clip_id
  		where
  			c.clip_id > 0 order by c.clip_id desc, 
  			write_date desc limit #{pageStart}, #{perPageNum}
  		]]>
  	</select>
  	
  	<select id="readTotalCount" resultType="java.lang.Integer">
  		select count(clip_id) from
  		clip
  	</select>
</mapper>